/**
* computes marginal probability for all input variables
* @param {Distribution} Table
* @param {Array.<string>} variables  e.g.["A", "-C"]
* @return {number} probability that 'variables' are true in 'Table'
*/
var marginal = cache(function(Table, variables){
  var tokens = Table.support()
  var all_x = map(function(v){
    v.indexOf("-") != -1 ? filter(function(k){k.indexOf(v) != -1}, tokens) :
                           filter(function(k){k.indexOf("-"+v) == -1}, tokens)
  }, variables)
  var xs = intersect_arrays(all_x)

  return reduce(function(x, acc){acc + Math.exp(Table.score(x))}, 0, xs)
})

/**
* builds compound utterances
* @param {Array.<Array.<string>>} var_powerset
* @param {string} connective
* @return {Array.<Array.<string>>} all combinations of strings using
* 'connective' for each subset of strings in 'var_powerset'
*/
var connect_variables = function(var_powerset, connective){
  var connected_vars = mapIndexed(function(idx, first_set){
    var rest_sets = var_powerset.slice(idx+1)
    var sets_to_pair = filter(function(rest_i){
      all(function(x){
        rest_i.indexOf(x) == -1 && rest_i.indexOf(negate(x)) == -1
      }, first_set)
    }, rest_sets)
    var elems_to_pair = map(function(set_i){set_i.join(" and ")}, sets_to_pair)

    var antecedent = first_set.join(" and ")
    var ifs = reduce(function(key, acc){
      acc.concat([antecedent + connective + key, key + connective + antecedent])
    }, [], elems_to_pair)
    return ifs
  }, var_powerset)

  var filtered = filter(function(arr){arr.length >= 1}, connected_vars)
  var connected_vars = reduce(function(arr, acc){
    acc.concat(arr)
  }, [], filtered)

  return connected_vars
}

/**
* generates maximal set of utterances
* @param {Array.<string>} variables
* @param {boolean} include_null_utt
* @return {Array.<string>} conjunctions, literals, likely + literal and
* conditionals built from 'variables'
*/
var make_utterances = function(variables, include_null_utt, include_disjunctions){
  var var_powerset = get_var_powerset(variables, false)

  var conj_literals = map(function(set_i){set_i.join(" and ")}, var_powerset)
  var literals = filter(function(utt){utt.indexOf(" and ") == -1}, conj_literals)
  display("literals: " + literals)
  var likelys = map(function(lit){"likely " + lit}, literals)
  display("likelys: " + likelys)

  var conditionals = connect_variables(var_powerset, " > ")
  display("conditionals: " + conditionals)

  var disjunctions = filter(function(utt) {utt.includes(" or ")},
    map(function(set_i){set_i.join(" or ")}, var_powerset));

  var factuals = include_disjunctions ? disjunctions.concat(conj_literals) : conj_literals;
  if(include_disjunctions) {
    display("disjunctions: " + disjunctions)
  }

  var utterances = factuals.concat(likelys.concat(conditionals))
  return include_null_utt ? [""].concat(utterances) : utterances;
}

/**
* computes probability corresponding to utterance
* @param {string} utterance
* @param {Distribution} Table
* @return {number} probability corresponding to 'utterance' (in state 'Table')
*/
var utterance_probs = cache(function(utterance, Table){
  if(utterance.indexOf(">") != -1){
    var components = utterance.split(" > ")
    var antecedent = components[0].split(" and ").join("")
    var consequent = components[1].split(" and ").join("")
    return marginal(Table, [antecedent, consequent]) /
           marginal(Table, [antecedent])
  }
  else if(utterance.includes("likely")){
    var u = utterance.slice("likely ".length)
    return marginal(Table, [u])
  } else if(utterance.includes("and")){
    var components = utterance.split(" and ")
    return marginal(Table, components)
  } else if(utterance.includes("or")) {
    var components = utterance.split(" or ")
    var p_marginals = marginal(Table, [components[0]]) +
      marginal(Table, [components[1]]);
    var p_joint = marginal(Table, components)
    return(p_marginals - p_joint)
  }
  else {
    return marginal(Table, [utterance])
  }
})

/**
* denotation function
* @param {string} utterance
* @param {Distribution} Table
* @return {boolean} true if 'utterance' is literally true in state 'Table'
*/
var meaning = cache(function(utterance, Table){
 var p = utterance_probs(utterance, Table)
 var u_applicable =
  utterance == "" ? true :
  (utterance.includes('likely') ? p > globalStore.thresholds.theta_likely :
  p >= globalStore.thresholds.theta)
 // display(utterance + " " + p + " " + u_applicable)
 return u_applicable
})

/**
* called by priorConditionedForSpeaker
* @param {boolean} cond
* @param {Distribution} Table
* @return {boolean} true if 'cond' holds otherwise false
*/
var check_speaker_condition = function(cond, Table) {
  if(globalStore.utterances.includes(cond)) {
    return meaning(cond, Table)
  } else {
      let pac = Math.exp(Table.score("AC"))
      let pnac = Math.exp(Table.score("-AC"))
      let pa = pac + Math.exp(Table.score("A-C"))
      let pc = pac + pnac
      let p_c_given_a = pac / pa;
      let p_c_given_na = pnac / (1-pa);
      let p_delta = p_c_given_a - p_c_given_na;
      let p_rooij = p_delta / (1 - p_c_given_na);
      let probs = {pa, pc, p_c_given_a, p_delta, p_rooij}

      if(cond == "p_rooij") {
        return probs.p_rooij >= globalStore.thresholds.theta
      } else if(cond == "p_delta") {
          return probs.p_delta > 0 && probs.p_c_given_a >= globalStore.thresholds.theta;
      } else if(cond == "uncertainAandC" || cond == "certainAandC" || cond == "unc-cert") {
          let uncC = (probs.pc > (1 - globalStore.thresholds.theta)) &&
                     (probs.pc < globalStore.thresholds.theta)
          let uncA = (probs.pa > (1 - globalStore.thresholds.theta)) &&
                     (probs.pa < globalStore.thresholds.theta)
          let certA = (probs.pa >= globalStore.thresholds.theta) ||
                      (probs.pa <= 1 - globalStore.thresholds.theta)
          let certC = (probs.pc >= globalStore.thresholds.theta) ||
                      (probs.pc <= 1 - globalStore.thresholds.theta);

          return cond == "uncertainAandC" ? uncA && uncC :
                 cond == "certainAandC" ? certA && certC :
                 (certA && uncC) || (certC && uncA);
      } else {
        // simply accept
        return true
      }
    }
}
/**
* computes conditioned Prior Distribution
* @param {string} cond one of: 'p_rooij', 'p_delta', 'uncertainAandC',
* 'certainAandC', 'unc-cert' or any utterance in set of utterances (conditions
* on states where this utterance is true), otherwise simply returns true
* @return {Distribution}
*/
var priorConditionedForSpeaker = function(cond){
  return Infer({model:function(){
    var state = sample(globalStore.state_prior)
    var Table = state["table"]
    condition(check_speaker_condition(cond, Table))
    return(state)
  }});
}
