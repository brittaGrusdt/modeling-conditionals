/**
* RSA Literal Listener
* @param {string} utterance
* @return {Distribution}
*/
var literal_listener = cache(function(utterance) {
  Infer({method:'enumerate',model: function(){
    var state = sample(globalStore.state_prior)
    condition(meaning(utterance, state["table"]))
    return state
  }})
}, 10000)

/**
* RSA Literal Listener marginalized to get distribution over tables only
* @param {string} utterance
* @return {Distribution}
*/
var marginal_LL = cache(function(utterance){
  marginalize(literal_listener(utterance), 'table')
}, 10000)

/**
* RSA Speaker
* @param {object} state with fields 'table': mapping to Table distribution,
* 'r' mapping to causal relation and 'bn_id' which is a unique id for state
* @param {boolean} displayU for debugging, if true displays utilities of each
* sampled utterance
* @return {Distribution}
*/
var speaker = cache(function(state, displayU){
  let distr = Infer({method:'enumerate', model: function(){
    var utterance = uniformDraw(globalStore.utterances)
    var LL = marginal_LL(utterance)
    var utility = LL.score(state.table)
    if(displayU && utility != -Infinity){
      display(utterance + ": " + utility)
    }
    factor(globalStore.alpha * utility)
    return(utterance)
    }
  });
 return(distr)
}, 10000)

/**
* RSA Pragmatic Listener
* @param {string} utterance
* @return {Distribution}
*/
var listener = function(utterance){
  return Infer({method:'enumerate', model:function(){
                  var state = sample(globalStore.state_prior)
                  var sp = speaker(state, false)
                  observe(sp, utterance)
                  return state
                }})
}
